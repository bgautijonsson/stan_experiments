---
title: "Simple Normal Copula"
format: html
editor: source
---


```{r setup}
library(cmdstanr)
library(evd)
library(tidyverse, warn.conflicts = FALSE)
library(posterior)
library(bayesplot)
library(gt)
library(here)
library(purrr)
library(glue)
library(arrow)
library(GGally)
library(broom)
library(gt)
library(gtExtras)
library(scales)
library(geomtextpath)

theme_set(bggjphd::theme_bggj())


```



```{r}
posterior <- open_dataset(
  here("Results", "Stan", "copula_data", "shared_params", "posterior"),
  format = "parquet"
) |> 
  collect() |> 
  mutate(
    rho = max(true_value[variable == "rho"]),
    .by = simulation
  )
caption <- bquote(
  paste(
    "Based on ", 
    .(max(posterior$simulation)), 
    " simulations from a multivariate distribution with GEV(6, 3, 0.1) margins and AR(1) copula where the dependence parameter, ",
    rho, ", is drawn from a Uniform(-1, 1) distribution with probability 0.9 and is equal to 0 with probability 0.1."
  )
)
```

```{r}
posterior |> 
  summarise(
    rhat = max(rhat),
    .by = simulation
  ) |> 
  ggplot(aes(rhat)) +
  geom_histogram()
```

```{r}
posterior <- posterior |> 
  filter(
    max(rhat) < 1.1,
    .by = simulation
  )
```


```{r}
p <- posterior |>
  filter(
    rhat < 1.1,
    variable != "log_lik"
  ) |> 
  mutate(
    error = abs(posterior_mean - true_value) / abs(true_value),
    model = case_match(
      model,
      "copula" ~ "AR(1) Copula",
      "iid" ~ "i.i.d. Copula"
    )
  ) |> 
  filter(
    is.finite(error)
  ) |> 
  ggplot(aes(rho, error, col = model, fill = model)) +
  geom_smooth(alpha = 0.4) +
  geom_point(aes(size = n_replicate * n_id), alpha = 0.2) +
  geom_hline(yintercept = 0, lty = 2) +
  scale_x_continuous(
    limits = c(-1, 1),
    expand = expansion()
  ) +
  scale_y_continuous(
    trans = "log10",
    labels = label_percent()
  ) +
  scale_color_brewer(palette = "Set1") +
  scale_fill_brewer(palette = "Set1") +
  guides(size = "none") +
  facet_wrap("variable", scales = "free_y", labeller = label_parsed) +
  theme(
    legend.position = "top",
    plot.margin = margin(5, 15, 5, 15),
    strip.text = element_text(size = 12)
  ) +
  labs(
    title = "Absolute % errors when using the posterior mean as our estimator",
    subtitle = str_c(
      "Larger points are estimates based on larger simulated datasets"
    ),
    x = expression(rho),
    y = expression(frac(abs(bar(theta)[post] - theta[true]),theta[true])),
    col = NULL,
    fill = NULL,
    caption = caption
  )

ggsave(
  plot = p,
  filename = "Results/Figures/param_errors_abs.png",
  width = 8, height = 0.621 * 8, scale = 1.3
)

p
```

```{r}
p <- posterior |>
  filter(
    rhat < 1.1,
    variable != "log_lik"
  ) |> 
  mutate(
    error = posterior_mean - true_value,
    model = case_match(
      model,
      "copula" ~ "AR(1) Copula",
      "iid" ~ "i.i.d. Copula"
    )
  ) |> 
  ggplot(aes(rho, error, col = model, fill = model)) +
  geom_smooth(alpha = 0.4) +
  geom_point(aes(size = n_replicate * n_id), alpha = 0.2) +
  geom_hline(yintercept = 0, lty = 2) +
  scale_x_continuous(
    limits = c(-1, 1),
    expand = expansion()
  ) +
  scale_y_continuous(
    # trans = "log10",
    # labels = label_percent()
  ) +
  scale_color_brewer(palette = "Set1") +
  scale_fill_brewer(palette = "Set1") +
  guides(size = "none") +
  facet_wrap("variable", scales = "free_y", labeller = label_parsed) +
  theme(
    legend.position = "top",
    plot.margin = margin(5, 15, 5, 15),
    strip.text = element_text(size = 12)
  ) +
  labs(
    title = "Errors when using the posterior mean as our estimator",
    subtitle = str_c(
      "Larger points are estimates based on larger simulated datasets"
    ),
    x = expression(rho),
    y = expression(bar(theta)[post] - theta[true]),
    col = NULL,
    fill = NULL,
    caption = caption
  )

ggsave(
  plot = p,
  filename = "Results/Figures/param_errors.png",
  width = 8, height = 0.621 * 8, scale = 1.3
)

p
```

```{r}
p <- posterior |> 
  filter(variable == "log_lik") |> 
  mutate(
    mean_log_lik = posterior_mean / (n_replicate * n_id),
    model = case_match(
      model,
      "copula" ~ "AR(1) Copula",
      "iid" ~ "i.i.d. Copula"
    )
  ) |> 
  ggplot(aes(rho, mean_log_lik, col = model)) +
  geom_smooth(aes(fill = model), color = NA, alpha = 0.1) +
  geom_point(
    alpha = 0.5,
    aes(size = (n_replicate * n_id))
  ) +
  geom_labelsmooth(
    aes(label = model, hjust = model),
    size = 5
  ) +
  scale_x_continuous(
    limits = c(-1, 1),
    expand = expansion()
  ) +
  scale_color_brewer(palette = "Set1") +
  scale_fill_brewer(palette = "Set1") +
  scale_hjust_manual(values = c(0.6, 0.4)) +
  theme(
    legend.position = "none",
    plot.margin = margin(t = 5, r = 15, b = 5, l = 15)
  ) +
  labs(
    title = "The elppd gains from the AR(1) Copula increase with higher autocorrelations",
    subtitle = str_c(
      "Larger points are estimates based on larger simulated datasets"
    ),
    x = expression(rho),
    y = "elppd",
    caption = caption
  )

ggsave(
  plot = p,
  filename = "Results/Figures/elppd.png",
  width = 8, height = 0.621 * 8, scale = 1.3
)

p
```







```{r}
logit <- function(x) log(x / (1 - x))
inv_logit <- function(x) 1 / (1 + exp(-x))
p <- posterior |> 
  filter(variable == "log_lik") |> 
  mutate(
    mean_log_lik = posterior_mean / (n_replicate * n_id),
    model = case_match(
      model,
      "copula" ~ "AR(1) Copula",
      "iid" ~ "i.i.d. Copula"
    )
  ) |> 
  arrange(desc(model)) |> 
  mutate(
    diff = c(0, (diff((mean_log_lik)))),
    .by = simulation
  ) |> 
  filter(model != "i.i.d. Copula") |> 
  # mutate(
  #   rho = log(rho / (1 - rho))
  # ) |> 
  ggplot(aes(rho, diff)) +
  geom_hline(yintercept = 0, lty = 2, alpha = 0.5, linewidth = 0.5) + 
  geom_smooth(
    col = "black", 
    alpha = 0.1
  ) +
  geom_point(
    alpha = 0.5,
    aes(size = (n_replicate * n_id))
  ) +
  scale_x_continuous(
    limits = c(-1, 1),
    expand = expansion()
  ) +
  scale_color_brewer(palette = "Set1") +
  scale_fill_brewer(palette = "Set1") +
  theme(
    legend.position = "none",
    plot.margin = margin(t = 5, r = 15, b = 5, l = 15)
  ) +
  labs(
    title = "The elppd gains from the AR(1) Copula increase with higher autocorrelations",
    subtitle = str_c(
      "Larger points are estimates based on larger simulated datasets"
    ),
    # x = expression(paste("logit(", rho, ")")),
    x = expression(rho),
    y = expression(paste(elppd[AR(1)] - elppd[i.i.d.])),
    caption = caption
  )


ggsave(
  plot = p,
  filename = "Results/Figures/diff_elppd.png",
  width = 8, height = 0.621 * 8, scale = 1.3
)

p
```


```{r}
tab_dat <- posterior |> 
  distinct(
    model, simulation, n_replicate, n_id, time
  ) |> 
  pivot_wider(
    names_from = model, values_from = time
  ) |> 
  mutate(
    diff = copula / iid,
    n_replicate = n_replicate,
    n_id = n_id
  ) |> 
  summarise(
    model = list(lm(log(diff) ~ n_replicate + n_id - 1)),
    tidied = map(model, tidy, exponentiate = TRUE, conf.int = TRUE),
    r2 = map_dbl(model, \(x) glance(x)$r.squared)
  ) |> 
  select(tidied, r2) |> 
  unnest(tidied) |> 
  select(term, estimate, contains("conf"), r2) |> 
  mutate_at(
    vars(-term, -r2),
    \(x) x - 1
  ) |> 
  mutate(
    term = case_match(
      term,
      "n_replicate" ~ "For each replicate",
      "n_id" ~ "For each ID",
      .default = term
    )
  )

tab_dat |> 
  gt() |> 
  cols_hide(
    r2
  ) |> 
  cols_label(
    term = "Term",
    estimate = "Estimate",
    conf.low = "Lower",
    conf.high = "Upper"
  ) |> 
  tab_spanner(
    label = "95% CI",
    columns = contains("conf")
  ) |> 
  fmt_percent(
    columns = -term
  ) |> 
  tab_header(
    title = "How much more time does the Copula model take to sample?",
    subtitle = glue("R2 = {unique(round(tab_dat$r2, digits = 3))}")
  )
```

